import { getSecret } from "wix-secrets-backend";
import { fetch } from "wix-fetch";
import wixData from "wix-data";

const OPENAI_BASE_URL = "https://api.openai.com/v1";
const COLLECTION_NAME = "ChatThreads"; // Wix collection for thread mapping

async function getOpenAISecrets() {
    const apiKey = await getSecret("OPENAI-API-KEY");  
    const assistantId = await getSecret("OPENAI-ASSISTANT-ID");  
    return { apiKey, assistantId };
}

// Store thread ID mapped to channel ID
async function saveThreadId(channelId, threadId) {
    await wixData.save(COLLECTION_NAME, { channelId, threadId });
}

// Retrieve thread ID for a channel ID
async function getThreadId(channelId) {
    const result = await wixData.query(COLLECTION_NAME).eq("channelId", channelId).find();
    return result.items.length > 0 ? result.items[0].threadId : null;
}

// Create a new Assistant Thread
async function createThread(apiKey) {
    const response = await fetch(`${OPENAI_BASE_URL}/threads`, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json",
            "OpenAI-Beta": "assistants=v2"
        }
    });

    const data = await response.json();
    return data.id;
}

export async function sendMessageToAssistant(userMessage, channelId) {
    const { apiKey, assistantId } = await getOpenAISecrets();

    // Retrieve existing thread ID or create a new one
    let threadId = await getThreadId(channelId);
    if (!threadId) {
        threadId = await createThread(apiKey);
        await saveThreadId(channelId, threadId);
    }

    // Send user message to OpenAI Assistant
    await fetch(`${OPENAI_BASE_URL}/threads/${threadId}/messages`, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json",
            "OpenAI-Beta": "assistants=v2"
        },
        body: JSON.stringify({ role: "user", content: userMessage })
    });

    // Run the Assistant
    let runResponse = await fetch(`${OPENAI_BASE_URL}/threads/${threadId}/runs`, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json",
            "OpenAI-Beta": "assistants=v2"
        },
        body: JSON.stringify({ assistant_id: assistantId })
    });

    let runData = await runResponse.json();
    let runId = runData.id;

    // Poll for response completion
    let runStatus = "in_progress";
    while (runStatus !== "completed") {
        let statusResponse = await fetch(`${OPENAI_BASE_URL}/threads/${threadId}/runs/${runId}`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${apiKey}`,
                "OpenAI-Beta": "assistants=v2"
            }
        });

        let statusData = await statusResponse.json();
        runStatus = statusData.status;
    }

    // Retrieve Assistant response
    let messagesResponse = await fetch(`${OPENAI_BASE_URL}/threads/${threadId}/messages`, {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${apiKey}`,
            "OpenAI-Beta": "assistants=v2"
        }
    });

    let messagesData = await messagesResponse.json();
    let assistantResponse = messagesData.data[0].content[0].text.value;

    return assistantResponse;
}
